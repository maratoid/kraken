---
- name: create a temp path kraken services locally
  local_action: shell mktemp -d -t services.{{ inventory_hostname }}.XXXXXXXXXX
  register: services_local_path

- name: See if tiller rc if present
  shell: >
    /usr/bin/kubectl --kubeconfig={{ kubeconfig | expanduser }} get rc {{ tiller_rc }}
  register: tiller_present
  ignore_errors: yes

- name: Clean up releases
  shell: >
    /usr/bin/docker run --rm
    -v {{ helm_home }}:/helm-home
    --volumes-from kraken_data
    -e KUBECONFIG={{ kubeconfig }} {{ helm_image }}
    delete {{ item.split('|')[0] }}
  with_items: "{{ kraken_services.split(' ') }}"
  async: 7200
  poll: 0
  register: cleanup_results
  ignore_errors: yes
  when: tiller_present|success

- name: Wait for cleanup to complete
  async_status: jid={{ item.ansible_job_id }}
  register: cleanup_result
  until: cleanup_result|success
  retries: 5
  delay: 5
  with_items: cleanup_results.results
  when: (cleanup_results is defined) and (tiller_present|success)
  ignore_errors: yes

- name: Clean up releases identifier names
  file: path={{ helm_home }}/{{item.split('|')[0]}} state=absent
  with_items: "{{ kraken_services.split(' ') }}"
  ignore_errors: yes

- name: Clean up tiller rc if present
  shell: >
    /usr/bin/kubectl --kubeconfig={{ kubeconfig | expanduser }} delete rc {{ tiller_rc }}
  when: tiller_present|success

- name: Create Helm home
  become: yes
  file: >
    path={{ helm_home }}
    state=directory

- name: Init helm
  shell: >
    /usr/bin/docker run --rm
    -v {{ helm_home }}:/helm-home
    --volumes-from kraken_data
    -e KUBECONFIG={{ kubeconfig }} {{ helm_image }}
    init --tiller-image {{ tiller_image }}

- name: Remove helm repositories
  shell: >
    /usr/bin/docker run --rm
    -v {{ helm_home }}:/helm-home
    --volumes-from kraken_data
    -e KUBECONFIG={{ kubeconfig }} {{ helm_image }}
    repo remove {{ item.split('|')[0] }}
  with_items: "{{ kraken_services_repos.split(' ') }}"
  ignore_errors: yes

- name: Add helm repositories
  shell: >
    /usr/bin/docker run --rm
    -v {{ helm_home }}:/helm-home
    --volumes-from kraken_data
    -e KUBECONFIG={{ kubeconfig }} {{ helm_image }}
    repo add {{ item.split('|')[0] }} {{ item.split('|')[1] }}
  with_items: "{{ kraken_services_repos.split(' ') }}"

- name: Get all user provided service configs
  stat: path={{item}}
  with_fileglob: "{{ service_configs }}"
  register: user_configs

- name: Fetch all the values files
  become: yes
  run_once: true
  fetch: >
    src={{ item }}
    dest={{ services_local_path }}/
    flat=yes
    fail_on_missing=yes
  with_fileglob: "{{ service_configs_src }}"

- name: Create configs destination
  become: yes
  file: >
    path={{ service_configs_dst }}
    state=directory

- name: Render helm values files for all deployment names in kraken_services unless already present
  template: src={{ item }} dest={{ service_configs_dst }}/{{ item | basename }}.yaml
  with_fileglob: "{{ services_local_path }}/*.{{ service_configs_ext }}"

- name: Create default values file
  template: src=helm-values.yaml.jinja2 dest={{ service_configs_dst }}/default-helm-values.yaml