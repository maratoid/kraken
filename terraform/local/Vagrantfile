require File.join(File.dirname(__FILE__), 'kraken_helpers.rb')

install_plugins

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.ssh.insert_key = false
  #config.ssh.private_key_path = File.expand_path(ENV['KRAKEN_VAGRANT_PRIVATE_KEY'])
  config.ssh.forward_agent = true
  config.ssh.username = 'core'

  config.vm.box = coreos_boxname
  config.vm.box_version = "= #{coreos_release}"
  config.vm.box_url = "#{coreos_url}/#{coreos_release}/coreos_production_vagrant.json"

# Share local source with Virtual box instances.
# DISABLED by default. Comment out to enable.
#  config.vm.synced_folder "../../", "/srv/kraken", disabled: false, type: "nfs", nfs_udp: true, mount_options: ['rsize=32768', 'wsize=32768', 'nolock']


  config.trigger.before :up, :vm => 'etcd'  do
    info "getting ansible roles"
    run "ansible-galaxy install sigma.coreos-bootstrap --ignore-errors"
  end

  # array of systems with multinodes for ansible inventory
  apiserver_host_data = ""
  node_host_data = ""

  # apiserver nginx pool
  apiserver_nginx_pool_arr = []
  apiserver_ip_pool_arr = []
  apiserver_host_data_arr = []
  get_num_apiservers.times do |n|
    ip_addr = base_ip_address + "#{n+1+2+100}" #n+1(index starts at 0) + <etcd and master> + 100
    apiserver_nginx_pool_arr << "server #{ip_addr}:443"
    apiserver_ip_pool_arr << "#{ip_addr}"
  end

  (1..(get_num_vms)).each do |i| # number of nodes + number of apiservers + master and etcd nodes

    user_data = build_coreos_userdata(i)

    config.vm.define vm_name = user_data[:name] do |config2|
      config2.vm.hostname = vm_name

      if enable_serial_logging
        logdir = File.join(File.dirname(__FILE__), 'log')
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "%s-serial.txt" % vm_name)
        FileUtils.touch(serialFile)

        config2.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--uart1", "0x3F`8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      config2.vm.provider :virtualbox do |vb, override|
        vb.memory = user_data[:mem]
        vb.cpus = user_data[:cpus]
      end

      config2.vm.provider :vmware_fusion do |v|
        v.vmx["memsize"] = user_data[:mem]
        v.vmx["numvcpus"] = user_data[:cpus]
      end

      ip_address = base_ip_address + "#{i+100}"
      config2.vm.network :private_network, ip: ip_address

      # add non-etcd or master ip to the list
      apiserver_short_name = ""
      if i.between?(3, (get_num_apiservers + 2))
        apiserver_ip_pool_arr << "#{ip_address}"
        apiserver_nginx_pool_arr << "server #{ip_address}:443"
        apiserver_host_data_arr << "#{"apiserver-%03d" % (i - 2)} ansible_ssh_host=#{ip_address}"
        apiserver_short_name = "#{"apiserver-%03d" % (i - 2)}"
      end

      # build string data for apiserver server info
      apiserver_ip_pool = apiserver_ip_pool_arr.join(",")
      apiserver_nginx_pool = apiserver_nginx_pool_arr.join(";") + ";"
      apiserver_host_data = apiserver_host_data_arr.join("\n")

      node_host_data += "#{"node-%03d" % (i - (2 + get_num_apiservers))} ansible_ssh_host=#{ip_address}\n" if i > (2 + get_num_apiservers)
      node_short_name = "#{"node-%03d" % (i - (2 + get_num_apiservers))}" if i > (2 + get_num_apiservers)

      if File.exist?(user_data[:data])
        # take userdata and replace placeholders
        tmp_user_data = "/tmp/#{vm_name}-vagrantfile-user-data"
        replacements = {
          '$ETCD_PRIVATE_IP' => base_ip_address + "#{1+100}",
          '$MASTER_PRIVATE_IP' => base_ip_address + "#{2+100}",
          '$NODE_001_IP' => base_ip_address + "#{(2 + get_num_apiservers)+100}",
          '$APISERVER_NGINX_POOL' => apiserver_nginx_pool,
          '$APISERVER_IP_POOL' => apiserver_ip_pool,
          '$NODE_SHORT_NAME' => node_short_name,
          '$APISERVER_SHORT_NAME' => apiserver_short_name
        }

        regexp = Regexp.new replacements.keys.map {|k| Regexp.quote(k) }.join('|')
        tmp_file = Tempfile.new("tmp_vagrantfile")

        begin
          File.foreach(user_data[:data], 'r') do |line|
            tmp_file.write line.gsub regexp, replacements
          end
          tmp_file.close
          FileUtils.mv(tmp_file.path, tmp_user_data)
        ensure
          tmp_file.close
          tmp_file.unlink
        end


        config2.vm.provision :file, :source => "#{tmp_user_data}", :destination => "/tmp/vagrantfile-user-data"
        config2.vm.provision :shell, :privileged => true,
        inline: <<-EOF
          mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/
        EOF
      end
      # Only execute the ansible provisioner once, when all machines are up and ready
      if base_ip_address + "#{i+100}" == final_node_ip
        kraken_env_var_entries = %w(
          dns_domain
          dns_ip
          dockercfg_base64
          hyperkube_image
          deployment_mode
          interface_name
          kraken_local_dir
          kraken_services_namespaces
          kraken_services
          kraken_services_repos
          thirdparty_scheduler
          kubernetes_api_version
          kubernetes_binaries_uri
          kubernetes_cert_dir
          logentries_token
          logentries_url
          cluster_user
          cluster_passwd
          cluster_name
          access_scheme
          access_port
	        sysdigcloud_access_key
        ).map { |s| [s.to_sym, ENV["KRAKEN_#{s.upcase}"]] }
        kraken_env_vars = Hash[kraken_env_var_entries]

        other_vars = {
          :master_ip => base_ip_address + "#{2+100}",
          :etcd_ip => base_ip_address + "#{1+100}",
          :apiservers_inventory_info => apiserver_host_data,
          :nodes_inventory_info => node_host_data,
          :ansible_ssh_private_key_file => File.expand_path(ENV['KRAKEN_VAGRANT_PRIVATE_KEY']),
          :node_001_ip => base_ip_address + "#{(2 + get_num_apiservers)+100}",
          :apiserver_nginx_pool => apiserver_nginx_pool,
          :apiserver_ip_pool => apiserver_ip_pool,
        }

        render_vars = other_vars.merge(kraken_env_vars)

        render("#{ENV['VAGRANT_CWD']}/templates/hosts.erb", "#{ENV['VAGRANT_CWD']}/rendered/hosts", render_vars)
        render("#{ENV['VAGRANT_CWD']}/templates/cluster.erb", "#{ENV['VAGRANT_CWD']}/rendered/group_vars/cluster", render_vars)
        render("#{ENV['VAGRANT_CWD']}/templates/local.erb", "#{ENV['VAGRANT_CWD']}/rendered/group_vars/local", render_vars)
        render("#{ENV['VAGRANT_CWD']}/templates/all.erb", "#{ENV['VAGRANT_CWD']}/rendered/group_vars/all", render_vars)
      end
    end
  end
end
